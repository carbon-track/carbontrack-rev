name: Sync Monorepo to Individual Repositories

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  sync-repositories:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout monorepo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史，便于检测变更
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'

    - name: Bootstrap target repos with CI workflows
      run: |
        echo "Ensuring target repos have CI workflow files from monorepo..."
      # This step intentionally left as a placeholder; detailed steps follow per-repo below


    - name: Check for frontend changes
      id: frontend-changes
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          # 检查推送中是否有 frontend 文件变更
          if git diff --name-only ${{ github.event.before }}..${{ github.event.after }} | grep -q "^frontend/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No frontend changes"
          fi
        else
          # PR合并时检查所有变更的文件
          if git diff --name-only HEAD~1 HEAD | grep -q "^frontend/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected in PR"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No frontend changes in PR"
          fi
        fi

    - name: Check for backend changes
      id: backend-changes
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          # 检查推送中是否有 backend 文件变更
          if git diff --name-only ${{ github.event.before }}..${{ github.event.after }} | grep -q "^backend/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Backend changes detected"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No backend changes"
          fi
        else
          # PR合并时检查所有变更的文件
          if git diff --name-only HEAD~1 HEAD | grep -q "^backend/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Backend changes detected in PR"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No backend changes in PR"
          fi
        fi

    - name: Sync frontend repository
      if: steps.frontend-changes.outputs.changed == 'true'
      env:
        FRONTEND_TOKEN: ${{ secrets.FRONTEND_REPO_TOKEN }}
      run: |
        echo "Syncing frontend changes..."
        # 克隆 frontend 仓库
        git clone https://x-access-token:${FRONTEND_TOKEN}@github.com/carbon-track/frontend.git frontend-repo
        cd frontend-repo

        # 确保 main 是最新的基底
        git fetch origin main --depth=1
        git checkout -B main origin/main

    - name: Build & test frontend (monorepo)
      if: steps.frontend-changes.outputs.changed == 'true'
      run: |
        echo "Building frontend in monorepo..."
        cd frontend
        # enable pnpm via corepack
        corepack enable || true
        corepack prepare pnpm@latest --activate || true
        pnpm install --frozen-lockfile
        pnpm build
        echo "Frontend build succeeded"

        # Switch to the cloned frontend repo and copy build output into it
        cd ..
        if [ ! -d frontend-repo ]; then
          echo "frontend-repo not found; expected clone from earlier step"
          exit 1
        fi
        cd frontend-repo

        # 清空现有内容（除了 .git）
        shopt -s extglob
        rm -rf !(".git")
        shopt -u extglob

        # 复制新内容（包括隐藏文件）
        cp -r ../frontend/* . 2>/dev/null || true
        cp -r ../frontend/.[!.]* . 2>/dev/null || true

        # 配置提交者信息（CI 环境）
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # 如果没有变化则退出
        if git diff --quiet --exit-code && git diff --staged --quiet --exit-code; then
          echo "No changes to commit in frontend repository"
          cd ..
          rm -rf frontend-repo
          exit 0
        fi

        # 添加并提交变更（允许在无差异时忽略错误）
        git add -A
        git commit -m "sync: update from monorepo (${GITHUB_SHA::7})" || true

        # 推送到临时分支并由 PR 合并（避免直接改写 main）
        BRANCH="sync/monorepo-${GITHUB_SHA}"
        git push origin HEAD:$BRANCH --force-with-lease
        echo "Pushed frontend changes to branch $BRANCH"

        cd ..

    - name: Bootstrap frontend CI to target repo
      env:
        FRONTEND_TOKEN: ${{ secrets.FRONTEND_REPO_TOKEN }}
      run: |
        echo "Bootstrapping frontend CI in target repo (if different)"
        git clone https://x-access-token:${FRONTEND_TOKEN}@github.com/carbon-track/frontend.git frontend-repo-boot
        cd frontend-repo-boot
        git fetch origin main --depth=1
        git checkout -B main origin/main
        mkdir -p .github/workflows
        cp -f ../frontend/.github/workflows/ci.yml .github/workflows/ci.yml || true
        if git status --porcelain | grep -q .; then
          git add .github/workflows/ci.yml
          git commit -m "chore(ci): sync frontend CI from monorepo (${GITHUB_SHA::7})" || true
          BRANCH="sync/bootstrap-ci-${GITHUB_SHA}"
          git push origin HEAD:$BRANCH --force-with-lease
        else
          echo "Frontend CI up-to-date; no changes"
        fi
        cd ..
        # do not remove frontend-repo-boot here; PR creation step needs this directory


    - name: Prepare short sha
      id: vars
      run: |
        echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

    - name: Create PR for frontend
      if: steps.frontend-changes.outputs.changed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.FRONTEND_REPO_TOKEN }}
        path: frontend-repo
        commit-message: "sync: update from monorepo (${{ steps.vars.outputs.short_sha }})"
        branch: 'sync/monorepo-${{ github.sha }}'
        base: main
        title: "sync: update from monorepo (${{ steps.vars.outputs.short_sha }})"
        body: |
          Automated sync from monorepo `frontend/` folder.
        labels: sync
        draft: false

    - name: Create bootstrap PR for frontend
      if: always()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.FRONTEND_REPO_TOKEN }}
        path: frontend-repo-boot
        commit-message: "chore(ci): bootstrap frontend CI from monorepo (${{ steps.vars.outputs.short_sha }})"
        branch: 'sync/bootstrap-ci-${{ github.sha }}'
        base: main
        title: "chore(ci): bootstrap frontend CI from monorepo (${{ steps.vars.outputs.short_sha }})"
        body: |
          This PR bootstraps/updates the frontend CI workflow in the target repo from the monorepo.
        labels: sync,bootstrap
        draft: false

    - name: Mark frontend PR ready for review
      if: steps.frontend-changes.outputs.changed == 'true'
      env:
        FRONTEND_TOKEN: ${{ secrets.FRONTEND_REPO_TOKEN }}
      run: |
        echo "Marking frontend PR ready_for_review to trigger target-repo checks..."
        REPO="carbon-track/frontend"
        BRANCH="sync/monorepo-${GITHUB_SHA}"
        PR_JSON=$(curl -s -H "Authorization: token $FRONTEND_TOKEN" "https://api.github.com/repos/$REPO/pulls?head=carbon-track:$BRANCH")
        PR_NUM=$(echo "$PR_JSON" | jq -r '.[0].number')
        if [ -z "$PR_NUM" ] || [ "$PR_NUM" = "null" ]; then
          echo "No frontend PR found for branch $BRANCH"
          exit 0
        fi
        echo "Found PR #$PR_NUM — marking ready for review..."
        curl -s -X POST -H "Authorization: token $FRONTEND_TOKEN" "https://api.github.com/repos/$REPO/pulls/$PR_NUM/ready_for_review" || true

        # Do NOT merge here — target repo controls merge (enable branch protection & auto-merge there)
        echo "Frontend PR #$PR_NUM is ready for review. No merge will be attempted from monorepo." 

    - name: Cleanup frontend-repo
      if: steps.frontend-changes.outputs.changed == 'true'
      run: |
        echo "Cleaning up cloned frontend-repo"
        rm -rf frontend-repo || true

    - name: Sync backend repository
      if: steps.backend-changes.outputs.changed == 'true'
      env:
        BACKEND_TOKEN: ${{ secrets.BACKEND_REPO_TOKEN }}
      run: |
        echo "Syncing backend changes..."
        # 克隆 backend 仓库
        git clone https://x-access-token:${BACKEND_TOKEN}@github.com/carbon-track/backend.git backend-repo
        cd backend-repo

        # 确保 main 是最新的基底
        git fetch origin main --depth=1
        git checkout -B main origin/main

    - name: Setup PHP & run backend tests (monorepo)
      if: steps.backend-changes.outputs.changed == 'true'
      run: |
        echo "Setting up PHP and running backend tests..."
        sudo apt-get update
        sudo apt-get install -y php-cli unzip git curl
        curl -sS https://getcomposer.org/installer | php
        sudo mv composer.phar /usr/local/bin/composer
        cd backend
        composer install --no-interaction --prefer-dist
        # start any local services if required by tests
        composer run start &
        echo $! > /tmp/backend_start_pid || true
        # run phpunit (use vendor binary if present)
        if [ -f vendor/bin/phpunit ]; then
          vendor/bin/phpunit || true
        else
          phpunit || true
        fi
        # stop background services
        if [ -f /tmp/backend_start_pid ]; then
          kill $(cat /tmp/backend_start_pid) || true
          rm /tmp/backend_start_pid || true
        fi
        echo "Backend tests completed"

        # Switch to the cloned backend repo and copy monorepo backend files into it
        cd ..
        if [ ! -d backend-repo ]; then
          echo "backend-repo not found; expected clone from earlier step"
          exit 1
        fi
        cd backend-repo

        # 清空现有内容（除了 .git）
        shopt -s extglob
        rm -rf !(".git")
        shopt -u extglob

        # 复制新内容（包括隐藏文件）
        cp -r ../backend/* . 2>/dev/null || true
        cp -r ../backend/.[!.]* . 2>/dev/null || true

        # 配置提交者信息（CI 环境）
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # 如果没有变化则退出
        if git diff --quiet --exit-code && git diff --staged --quiet --exit-code; then
          echo "No changes to commit in backend repository"
          cd ..
          rm -rf backend-repo
          exit 0
        fi

        # 添加并提交变更（允许在无差异时忽略错误）
        git add -A
        git commit -m "sync: update from monorepo (${GITHUB_SHA::7})" || true

        # 推送到临时分支并由 PR 合并（避免直接改写 main）
        BRANCH="sync/monorepo-${GITHUB_SHA}"
        git push origin HEAD:$BRANCH --force-with-lease
        echo "Pushed backend changes to branch $BRANCH"

        cd ..

    - name: Bootstrap backend CI to target repo
      env:
        BACKEND_TOKEN: ${{ secrets.BACKEND_REPO_TOKEN }}
      run: |
        echo "Bootstrapping backend CI in target repo (if different)"
        git clone https://x-access-token:${BACKEND_TOKEN}@github.com/carbon-track/backend.git backend-repo-boot
        cd backend-repo-boot
        git fetch origin main --depth=1
        git checkout -B main origin/main
        mkdir -p .github/workflows
        cp -f ../backend/.github/workflows/ci.yml .github/workflows/ci.yml || true
        if git status --porcelain | grep -q .; then
          git add .github/workflows/ci.yml
          git commit -m "chore(ci): sync backend CI from monorepo (${GITHUB_SHA::7})" || true
          BRANCH="sync/bootstrap-ci-${GITHUB_SHA}"
          git push origin HEAD:$BRANCH --force-with-lease
        else
          echo "Backend CI up-to-date; no changes"
        fi
        cd ..
        # do not remove backend-repo-boot here; PR creation step needs this directory


    - name: Create PR for backend
      if: steps.backend-changes.outputs.changed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.BACKEND_REPO_TOKEN }}
        path: backend-repo
        commit-message: "sync: update from monorepo (${{ steps.vars.outputs.short_sha }})"
        branch: 'sync/monorepo-${{ github.sha }}'
        base: main
        title: "sync: update from monorepo (${{ steps.vars.outputs.short_sha }})"
        body: |
          Automated sync from monorepo `backend/` folder.
        labels: sync
        draft: false

    - name: Create bootstrap PR for backend
      if: always()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.BACKEND_REPO_TOKEN }}
        path: backend-repo-boot
        commit-message: "chore(ci): bootstrap backend CI from monorepo (${{ steps.vars.outputs.short_sha }})"
        branch: 'sync/bootstrap-ci-${{ github.sha }}'
        base: main
        title: "chore(ci): bootstrap backend CI from monorepo (${{ steps.vars.outputs.short_sha }})"
        body: |
          This PR bootstraps/updates the backend CI workflow in the target repo from the monorepo.
        labels: sync,bootstrap
        draft: false

    - name: Mark backend PR ready for review
      if: steps.backend-changes.outputs.changed == 'true'
      env:
        BACKEND_TOKEN: ${{ secrets.BACKEND_REPO_TOKEN }}
      run: |
        echo "Marking backend PR ready_for_review to trigger target-repo checks..."
        REPO="carbon-track/backend"
        BRANCH="sync/monorepo-${GITHUB_SHA}"
        PR_JSON=$(curl -s -H "Authorization: token $BACKEND_TOKEN" "https://api.github.com/repos/$REPO/pulls?head=carbon-track:$BRANCH")
        PR_NUM=$(echo "$PR_JSON" | jq -r '.[0].number')
        if [ -z "$PR_NUM" ] || [ "$PR_NUM" = "null" ]; then
          echo "No backend PR found for branch $BRANCH"
          exit 0
        fi
        echo "Found PR #$PR_NUM — marking ready for review..."
        curl -s -X POST -H "Authorization: token $BACKEND_TOKEN" "https://api.github.com/repos/$REPO/pulls/$PR_NUM/ready_for_review" || true
        
        # Do NOT merge here — target repo controls merge (enable branch protection & auto-merge there)
        echo "Backend PR #$PR_NUM is ready for review. No merge will be attempted from monorepo."

    - name: Create summary comment (for PRs)
      if: github.event_name == 'pull_request' && (steps.frontend-changes.outputs.changed == 'true' || steps.backend-changes.outputs.changed == 'true')
      uses: actions/github-script@v7
      with:
        script: |
          const frontendChanged = '${{ steps.frontend-changes.outputs.changed }}' === 'true';
          const backendChanged = '${{ steps.backend-changes.outputs.changed }}' === 'true';
          
          let message = '🔄 **Repository Sync Summary**\n\n';
          
          if (frontendChanged) {
            message += '✅ Frontend changes synced to `carbon-track/frontend`\n';
          }
          
          if (backendChanged) {
            message += '✅ Backend changes synced to `carbon-track/backend`\n';
          }
          
          if (!frontendChanged && !backendChanged) {
            message += 'ℹ️ No frontend or backend changes detected, no sync needed.\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });